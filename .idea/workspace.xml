<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="4f4bbb0e-9ec3-43ca-ba7c-a4b32efb4b91" name="Changes" comment="Implemented Method to obtain Token">
      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="SpotifyWrapped" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="SpotifyWrapped" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="SpotifyWrapped" type="f1a62948:ProjectNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Adz-ai&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/Adz-ai/SpotifyWrapped.git&quot;,
    &quot;accountId&quot;: &quot;80500567-76a3-4635-ae47-a9cb35d0de38&quot;
  }
}</component>
  <component name="GradleScriptDefinitionsStorage" workingDir="$PROJECT_DIR$" gradleHome="$USER_HOME$/.gradle/wrapper/dists/gradle-8.5-bin/5t9huq95ubn472n8rpzujfbqh/gradle-8.5" javaHome="/opt/homebrew/opt/openjdk@21/libexec/openjdk.jdk/Contents/Home" gradleVersion="8.5" />
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2LEiaxdKJHSEynawWIMBcdLyFMz" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Gradle.Build SpotifyWrapped.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.SpotifyWrapped [:org.adarssh.MainApp.main()].executor&quot;: &quot;Run&quot;,
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;Spring Boot.SpotifyWrappedApplication.executor&quot;: &quot;Run&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;extract.method.default.visibility&quot;: &quot;public&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/adarssh/Documents/GitHub/SpotifyWrapped&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settingsdialog.project.gradle&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="org.adarssh" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="RubyModuleManagerSettings">
    <option name="blackListedRootsPaths">
      <list>
        <option value="$PROJECT_DIR$/src/main" />
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Spring Boot.SpotifyWrappedApplication">
    <configuration name="MainApp" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.adarssh.MainApp" />
      <module name="SpotifyWrapped.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.adarssh.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SpotifyWrappedApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="envFilePaths">
        <option value="$PROJECT_DIR$/.env" />
      </option>
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="SpotifyWrapped.main" />
      <selectedOptions>
        <option name="environmentVariables" />
      </selectedOptions>
      <option name="SPRING_BOOT_MAIN_CLASS" value="org.adarssh.SpotifyWrappedApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.MainApp" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task id="LOCAL-00001" summary="Fixing Conflicts">
      <created>1675424997779</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1675424997779</updated>
    </task>
    <task id="LOCAL-00002" summary="Fixing Conflicts">
      <created>1675425386997</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1675425386997</updated>
    </task>
    <task id="LOCAL-00003" summary="gitignore">
      <created>1675425937156</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1675425937156</updated>
    </task>
    <task id="LOCAL-00004" summary="Lombok and Adding ability for User to provide Token">
      <created>1675426028024</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1675426028024</updated>
    </task>
    <task id="LOCAL-00005" summary="Get Rid of build folder">
      <created>1675426092960</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1675426092960</updated>
    </task>
    <task id="LOCAL-00006" summary="Removed Lombok">
      <created>1675426349280</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1675426349280</updated>
    </task>
    <task id="LOCAL-00007" summary="idea">
      <created>1675426723775</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1675426723775</updated>
    </task>
    <task id="LOCAL-00008" summary="edited build.gradle.kts">
      <created>1675427485124</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1675427485124</updated>
    </task>
    <task active="true" id="Default" summary="Default task">
      <changelist id="4f4bbb0e-9ec3-43ca-ba7c-a4b32efb4b91" name="Changes" comment="edited build.gradle.kts" />
      <created>1675442716606</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1675442716606</updated>
      <workItem from="1675442718870" duration="4466000" />
      <workItem from="1761320912155" duration="1830000" />
      <workItem from="1761322832246" duration="237000" />
      <workItem from="1761323078118" duration="10634000" />
    </task>
    <task id="LOCAL-00009" summary="TopSpotifyAlbums">
      <created>1675443087312</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1675443087312</updated>
    </task>
    <task id="LOCAL-00010" summary="Extracting Duplicated Code into another Class">
      <created>1675444009246</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1675444009246</updated>
    </task>
    <task id="LOCAL-00011" summary="TopSpotifyGenres">
      <created>1675446216299</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1675446216299</updated>
    </task>
    <task id="LOCAL-00012" summary="Refactored Name">
      <created>1675446320240</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1675446320240</updated>
    </task>
    <option name="localTasksCounter" value="13" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="gitignore" />
    <MESSAGE value="Lombok and Adding ability for User to provide Token" />
    <MESSAGE value="Get Rid of build folder" />
    <MESSAGE value="Removed Lombok" />
    <MESSAGE value="idea" />
    <MESSAGE value="edited build.gradle.kts" />
    <MESSAGE value="TopSpotifyAlbums" />
    <MESSAGE value="Extracting Duplicated Code into another Class" />
    <MESSAGE value="TopSpotifyGenres" />
    <MESSAGE value="Refactored Name" />
    <MESSAGE value="Implemented Method to obtain Token" />
    <MESSAGE value="feat: Modernize to Java 21 + Spring Boot 3.2.2 with React TypeScript frontend&#10;&#10;Complete modernization of the Spotify Wrapped application with full OAuth2 implementation.&#10;&#10;Backend Changes:&#10;- Upgraded from legacy Java to Java 21 with modern features (records, var)&#10;- Migrated to Spring Boot 3.2.2 with Spring Security OAuth2 Client&#10;- Implemented OAuth2 Authorization Code Flow for user authentication&#10;- Replaced HttpURLConnection with Spring's RestClient&#10;- Added layered architecture: Controller -&gt; Service -&gt; External API&#10;- Created modern DTOs using Java records&#10;- Implemented comprehensive error handling and logging&#10;- Added SecurityConfig with CORS support for frontend&#10;- Environment-based configuration (Client ID/Secret from env vars)&#10;- Updated Gradle to 8.5&#10;&#10;Frontend Implementation:&#10;- Built React 18 + TypeScript 5.3 frontend with strict type checking&#10;- Configured ESLint with strict TypeScript rules for code quality&#10;- Styled with Tailwind CSS using Spotify color palette&#10;- Created custom hooks for authentication and data fetching&#10;- Type-safe Axios API client with proper error handling&#10;- Implemented components: Login, Dashboard, TrackCard, ArtistCard&#10;- Vite 5 for fast development with HMR&#10;- Configured Vite proxy for API requests to backend&#10;- Set server to listen on 0.0.0.0 for 127.0.0.1 access&#10;&#10;Key Technical Decisions:&#10;- Use 127.0.0.1 instead of localhost for OAuth2 cookie consistency&#10;- Disabled CSRF for frontend proxy setup&#10;- Session-based authentication with cookies&#10;- Login/logout URLs go directly to backend (not through proxy)&#10;&#10;Documentation:&#10;- Updated README.md with full-stack information&#10;- Created RUN_FULL_STACK.md with step-by-step run instructions&#10;- Created SPOTIFY_SETUP.md with detailed OAuth2 setup guide&#10;- Archived old documentation files to docs/archive/&#10;- Updated .gitignore for frontend build artifacts&#10;&#10;API Endpoints:&#10;- GET /api/ - Authentication status&#10;- GET /api/health - Health check&#10;- GET /api/spotify/wrapped - Complete wrapped data&#10;- GET /api/spotify/top/tracks - Top tracks&#10;- GET /api/spotify/top/artists - Top artists&#10;- GET /api/spotify/top/albums - Top albums&#10;- GET /api/spotify/top/genres - Top genres&#10;&#10;All endpoints tested and working with OAuth2 flow." />
    <MESSAGE value="feat: Modernize to Java 21 + Spring Boot 3.2.2 with React TypeScript frontend&#10;&#10;Complete modernization of the Spotify Wrapped application with full OAuth2 implementation.&#10;&#10;Backend Changes:&#10;- Upgraded from legacy Java to Java 21 with modern features (records, var)&#10;- Migrated to Spring Boot 3.2.2 with Spring Security OAuth2 Client&#10;- Implemented OAuth2 Authorization Code Flow for user authentication&#10;- Replaced HttpURLConnection with Spring's RestClient&#10;- Added layered architecture: Controller -&gt; Service -&gt; External API&#10;- Created modern DTOs using Java records&#10;- Implemented comprehensive error handling and logging&#10;- Added SecurityConfig with CORS support for frontend&#10;- Environment-based configuration (Client ID/Secret from env vars)&#10;- Updated Gradle to 8.5&#10;&#10;Frontend Implementation:&#10;- Built React 18 + TypeScript 5.3 frontend with strict type checking&#10;- Configured ESLint with strict TypeScript rules for code quality&#10;- Styled with Tailwind CSS using Spotify color palette&#10;- Created custom hooks for authentication and data fetching&#10;- Type-safe Axios API client with proper error handling&#10;- Implemented components: Login, Dashboard, TrackCard, ArtistCard&#10;- Vite 5 for fast development with HMR&#10;- Configured Vite proxy for API requests to backend&#10;- Set server to listen on 0.0.0.0 for 127.0.0.1 access&#10;&#10;Key Technical Decisions:&#10;- Use 127.0.0.1 instead of localhost for OAuth2 cookie consistency&#10;- Disabled CSRF for frontend proxy setup&#10;- Session-based authentication with cookies&#10;- Login/logout URLs go directly to backend (not through proxy)&#10;&#10;Documentation:&#10;- Updated README.md with full-stack information&#10;- Created RUN_FULL_STACK.md with step-by-step run instructions&#10;- Created SPOTIFY_SETUP.md with detailed OAuth2 setup guide&#10;- Archived old documentation files to docs/archive/&#10;- Updated .gitignore for frontend build artifacts&#10;&#10;API Endpoints:&#10;- GET /api/ - Authentication status&#10;- GET /api/health - Health check&#10;- GET /api/spotify/wrapped - Complete wrapped data&#10;- GET /api/spotify/top/tracks - Top tracks&#10;- GET /api/spotify/top/artists - Top artists&#10;- GET /api/spotify/top/albums - Top albums&#10;- GET /api/spotify/top/genres - Top genres&#10;&#10;All endpoints tested and working with OAuth2 flow." />
    <MESSAGE value="feat: Add Checkstyle and SpotBugs for code quality&#10;&#10;Added comprehensive code quality tools to maintain high standards:&#10;&#10;Checkstyle Configuration:&#10;- Added Checkstyle plugin with Google Java Style guidelines&#10;- Created checkstyle.xml configuration with Spring Boot adjustments&#10;- Added suppressions.xml for generated code and resources&#10;- Configured to enforce 120 character line length&#10;- Allows Lombok's logger field naming pattern&#10;- Generates HTML and XML reports&#10;&#10;SpotBugs Configuration:&#10;- Added SpotBugs plugin for static bug analysis&#10;- Configured with MAX effort and MEDIUM confidence levels&#10;- Created excludeFilter.xml to suppress false positives:&#10;  * DTO records (immutable, used for JSON serialization)&#10;  * Spring service beans (managed by container)&#10;- Generates HTML and XML reports&#10;&#10;Code Fixes Applied:&#10;- Fixed whitespace issues in all records ({} -&gt; { })&#10;- Replaced star imports with explicit imports&#10;- Removed unused imports&#10;- Added missing Javadoc comments&#10;- Added @SuppressWarnings for false positive utility class warning&#10;&#10;Documentation:&#10;- Updated README.md with Code Quality section&#10;- Documented how to run checks&#10;- Listed report locations and configuration files" />
    <MESSAGE value="feat: Add Checkstyle and SpotBugs for code quality&#10;&#10;Added comprehensive code quality tools to maintain high standards:&#10;&#10;Checkstyle Configuration:&#10;- Added Checkstyle plugin with Google Java Style guidelines&#10;- Created checkstyle.xml configuration with Spring Boot adjustments&#10;- Added suppressions.xml for generated code and resources&#10;- Configured to enforce 120 character line length&#10;- Allows Lombok's logger field naming pattern&#10;- Generates HTML and XML reports&#10;&#10;SpotBugs Configuration:&#10;- Added SpotBugs plugin for static bug analysis&#10;- Configured with MAX effort and MEDIUM confidence levels&#10;- Created excludeFilter.xml to suppress false positives:&#10;  * DTO records (immutable, used for JSON serialization)&#10;  * Spring service beans (managed by container)&#10;- Generates HTML and XML reports&#10;&#10;Code Fixes Applied:&#10;- Fixed whitespace issues in all records ({} -&gt; { })&#10;- Replaced star imports with explicit imports&#10;- Removed unused imports&#10;- Added missing Javadoc comments&#10;- Added @SuppressWarnings for false positive utility class warning&#10;&#10;Documentation:&#10;- Updated README.md with Code Quality section&#10;- Documented how to run checks&#10;- Listed report locations and configuration files" />
    <MESSAGE value="feat: Add Swagger/OpenAPI, input validation, and Spring Boot Actuator&#10;&#10;Enhanced backend with three major improvements for better API usability and monitoring:&#10;&#10;1. API Documentation (Swagger/OpenAPI):&#10;   - Added SpringDoc OpenAPI 3.0 dependency&#10;   - Created OpenApiConfig with comprehensive API documentation&#10;   - Added @Operation, @ApiResponse, @Parameter annotations to all controllers&#10;   - Interactive Swagger UI available at /swagger-ui.html&#10;   - OpenAPI JSON specification at /api-docs&#10;   - Includes request/response examples and parameter descriptions&#10;&#10;2. Input Validation:&#10;   - Added Jakarta Bean Validation to all endpoints&#10;   - @Min and @Max constraints on limit parameters (1-50)&#10;   - @Validated annotation on controllers&#10;   - Custom validation messages for better error feedback&#10;   - Automatic validation error responses (400 Bad Request)&#10;&#10;3. Spring Boot Actuator:&#10;   - Added Spring Boot Actuator for health checks and monitoring&#10;   - Health endpoint: /actuator/health&#10;   - Info endpoint: /actuator/info with app metadata&#10;   - Metrics endpoint: /actuator/metrics&#10;   - Environment endpoint: /actuator/env&#10;   - Configured to show health details when authorized&#10;&#10;Security Configuration:&#10;- Updated SecurityConfig to allow public access to Swagger UI and Actuator endpoints&#10;- Maintained OAuth2 security for all Spotify API endpoints&#10;&#10;Application Configuration (application.yml):&#10;- Configured Actuator endpoints exposure&#10;- Added application info for /actuator/info&#10;- Configured Swagger UI settings (alpha sorting, request duration)&#10;&#10;Code Quality:&#10;- Fixed Checkstyle line length violations in controller annotations&#10;- Updated Checkstyle suppressions for Spring Boot main class&#10;- Fixed main() method signature (public static)&#10;- All code quality checks pass (Checkstyle + SpotBugs)&#10;&#10;Documentation:&#10;- Updated README.md with API documentation and monitoring sections&#10;- Added Swagger UI and Actuator endpoints information&#10;- Updated technologies list&#10;- Updated architecture diagram" />
    <MESSAGE value="feat: Add Swagger/OpenAPI, input validation, and Spring Boot Actuator&#10;&#10;Enhanced backend with three major improvements for better API usability and monitoring:&#10;&#10;1. API Documentation (Swagger/OpenAPI):&#10;   - Added SpringDoc OpenAPI 3.0 dependency&#10;   - Created OpenApiConfig with comprehensive API documentation&#10;   - Added @Operation, @ApiResponse, @Parameter annotations to all controllers&#10;   - Interactive Swagger UI available at /swagger-ui.html&#10;   - OpenAPI JSON specification at /api-docs&#10;   - Includes request/response examples and parameter descriptions&#10;&#10;2. Input Validation:&#10;   - Added Jakarta Bean Validation to all endpoints&#10;   - @Min and @Max constraints on limit parameters (1-50)&#10;   - @Validated annotation on controllers&#10;   - Custom validation messages for better error feedback&#10;   - Automatic validation error responses (400 Bad Request)&#10;&#10;3. Spring Boot Actuator:&#10;   - Added Spring Boot Actuator for health checks and monitoring&#10;   - Health endpoint: /actuator/health&#10;   - Info endpoint: /actuator/info with app metadata&#10;   - Metrics endpoint: /actuator/metrics&#10;   - Environment endpoint: /actuator/env&#10;   - Configured to show health details when authorized&#10;&#10;Security Configuration:&#10;- Updated SecurityConfig to allow public access to Swagger UI and Actuator endpoints&#10;- Maintained OAuth2 security for all Spotify API endpoints&#10;&#10;Application Configuration (application.yml):&#10;- Configured Actuator endpoints exposure&#10;- Added application info for /actuator/info&#10;- Configured Swagger UI settings (alpha sorting, request duration)&#10;&#10;Code Quality:&#10;- Fixed Checkstyle line length violations in controller annotations&#10;- Updated Checkstyle suppressions for Spring Boot main class&#10;- Fixed main() method signature (public static)&#10;- All code quality checks pass (Checkstyle + SpotBugs)&#10;&#10;Documentation:&#10;- Updated README.md with API documentation and monitoring sections&#10;- Added Swagger UI and Actuator endpoints information&#10;- Updated technologies list&#10;- Updated architecture diagram" />
    <MESSAGE value="feat: Add comprehensive testing with JaCoCo code coverage&#10;&#10;Implemented comprehensive testing infrastructure with 98 tests and JaCoCo coverage analysis.&#10;&#10;Testing Framework:&#10;- Added JaCoCo plugin (v0.8.11) for code coverage analysis&#10;- Configured coverage target of 80%&#10;- Added Spring Security Test and Mockito dependencies&#10;- Created application-test.yml for test configuration" />
    <MESSAGE value="feat: Add comprehensive testing with JaCoCo code coverage&#10;&#10;Implemented comprehensive testing infrastructure with 98 tests and JaCoCo coverage analysis.&#10;&#10;Testing Framework:&#10;- Added JaCoCo plugin (v0.8.11) for code coverage analysis&#10;- Configured coverage target of 80%&#10;- Added Spring Security Test and Mockito dependencies&#10;- Created application-test.yml for test configuration" />
    <MESSAGE value="fix: Resolve Checkstyle violations in test files&#10;&#10;Fixed all code quality violations in test suite to comply with Google Java Style:" />
    <MESSAGE value="fix: Resolve Checkstyle violations in test files&#10;&#10;Fixed all code quality violations in test suite to comply with Google Java Style:" />
    <MESSAGE value="feat: Add production-ready performance and resilience features&#10;&#10;1. Response Caching (Spring Cache + Caffeine)&#10;   - 5-minute TTL with 500 max entries per cache&#10;   - Per-user cache isolation using authenticated username as key&#10;   - Caches topTracks and topArtists endpoints&#10;   - 50-90% reduction in Spotify API calls&#10;   - 10-50ms cached responses vs 200-500ms API calls&#10;&#10;2. HTTP Compression (Gzip)&#10;   - Enabled for responses &gt; 1KB&#10;   - 60-80% reduction in payload size&#10;   - Configured for JSON, XML, HTML, and text responses&#10;   - Faster transfer times and better mobile experience&#10;&#10;3. Security Headers&#10;   - Created SecurityHeadersConfig with servlet filter&#10;   - Added HSTS (HTTP Strict Transport Security)&#10;   - X-Content-Type-Options: nosniff&#10;   - X-Frame-Options: DENY&#10;   - X-XSS-Protection: 1; mode=block&#10;   - Content-Security-Policy with strict rules&#10;   - Referrer-Policy: strict-origin-when-cross-origin&#10;   - Permissions-Policy (geolocation, microphone, camera)&#10;   - Production-ready security posture&#10;&#10;4. Resilience Patterns (Resilience4j)&#10;   Retry Pattern:&#10;   - 3 attempts with exponential backoff (500ms → 1000ms → 2000ms)&#10;   - Retries on ResourceAccessException and IOException&#10;   - Applied to getTopTracks() and getTopArtists()&#10;&#10;   Circuit Breaker Pattern:&#10;   - 50% failure threshold, 10-call sliding window&#10;   - 10s wait in open state, 3 test calls in half-open&#10;   - Graceful degradation with fallback methods&#10;   - Returns empty results instead of failing&#10;&#10;Dependencies Added:&#10;- Spring Boot Starter Cache&#10;- Caffeine 3.1.8 (high-performance caching)&#10;- Resilience4j Spring Boot 3 (2.2.0)&#10;- Spring Boot Starter AOP (for aspect-oriented annotations)&#10;&#10;Code Changes:&#10;- SpotifyWrappedApplication: Added @EnableCaching&#10;- SpotifyService: Added @Cacheable, @Retry, @CircuitBreaker annotations&#10;- SpotifyService: Implemented getCurrentUsername() for cache keys&#10;- SpotifyService: Added fallback methods for graceful degradation&#10;- application.yml: Configured caching, compression, and resilience settings" />
    <MESSAGE value="feat: Add production-ready performance and resilience features&#10;&#10;1. Response Caching (Spring Cache + Caffeine)&#10;   - 5-minute TTL with 500 max entries per cache&#10;   - Per-user cache isolation using authenticated username as key&#10;   - Caches topTracks and topArtists endpoints&#10;   - 50-90% reduction in Spotify API calls&#10;   - 10-50ms cached responses vs 200-500ms API calls&#10;&#10;2. HTTP Compression (Gzip)&#10;   - Enabled for responses &gt; 1KB&#10;   - 60-80% reduction in payload size&#10;   - Configured for JSON, XML, HTML, and text responses&#10;   - Faster transfer times and better mobile experience&#10;&#10;3. Security Headers&#10;   - Created SecurityHeadersConfig with servlet filter&#10;   - Added HSTS (HTTP Strict Transport Security)&#10;   - X-Content-Type-Options: nosniff&#10;   - X-Frame-Options: DENY&#10;   - X-XSS-Protection: 1; mode=block&#10;   - Content-Security-Policy with strict rules&#10;   - Referrer-Policy: strict-origin-when-cross-origin&#10;   - Permissions-Policy (geolocation, microphone, camera)&#10;   - Production-ready security posture&#10;&#10;4. Resilience Patterns (Resilience4j)&#10;   Retry Pattern:&#10;   - 3 attempts with exponential backoff (500ms → 1000ms → 2000ms)&#10;   - Retries on ResourceAccessException and IOException&#10;   - Applied to getTopTracks() and getTopArtists()&#10;&#10;   Circuit Breaker Pattern:&#10;   - 50% failure threshold, 10-call sliding window&#10;   - 10s wait in open state, 3 test calls in half-open&#10;   - Graceful degradation with fallback methods&#10;   - Returns empty results instead of failing&#10;&#10;Dependencies Added:&#10;- Spring Boot Starter Cache&#10;- Caffeine 3.1.8 (high-performance caching)&#10;- Resilience4j Spring Boot 3 (2.2.0)&#10;- Spring Boot Starter AOP (for aspect-oriented annotations)&#10;&#10;Code Changes:&#10;- SpotifyWrappedApplication: Added @EnableCaching&#10;- SpotifyService: Added @Cacheable, @Retry, @CircuitBreaker annotations&#10;- SpotifyService: Implemented getCurrentUsername() for cache keys&#10;- SpotifyService: Added fallback methods for graceful degradation&#10;- application.yml: Configured caching, compression, and resilience settings" />
    <MESSAGE value="fix: Fix critical Spring AOP self-invocation bug breaking cache&#10;&#10;CRITICAL BUG FIX: The caching implementation was fundamentally broken due to Spring AOP self-invocation issue.&#10;&#10;Problem:&#10;When a method calls another method within the same class (self-invocation),&#10;Spring's AOP proxy is bypassed, causing ALL annotations to be ignored:&#10;- @Cacheable (caching)&#10;- @Retry (retry logic)&#10;- @CircuitBreaker (circuit breaker)&#10;&#10;Affected Methods:&#10;- getTopAlbums() called getTopTracks() internally → NO CACHING&#10;- getTopGenres() called getTopArtists() internally → NO CACHING&#10;&#10;Impact:&#10;- /api/spotify/top/albums always hit Spotify API (no cache benefit)&#10;- /api/spotify/top/genres always hit Spotify API (no cache benefit)&#10;- /api/spotify/wrapped wasted 2 of 4 calls (albums/genres didn't use cache)&#10;- Caching was only working 50% of the time!&#10;&#10;Solution - AopContext.currentProxy() Pattern:&#10;The correct approach for Spring Boot 3.x (Spring 6) is to use AopContext.currentProxy()&#10;instead of self-injection, which causes circular dependency issues.&#10;&#10;Code Changes:&#10;1. SpotifyWrappedApplication.java:&#10;   - Added @EnableAspectJAutoProxy(exposeProxy = true)&#10;   - This exposes the AOP proxy so it can be accessed via AopContext&#10;&#10;2. SpotifyService.java:&#10;   - Added import: org.springframework.aop.framework.AopContext&#10;   - Updated getTopAlbums() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopTracks(maxSize);&#10;   - Updated getTopGenres() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopArtists(maxSize);&#10;&#10;3. SpotBugs exclusion:&#10;   - Added controller package exclusion for EI_EXPOSE_REP2&#10;   - False positive for Spring dependency injection pattern" />
    <MESSAGE value="fix: Fix critical Spring AOP self-invocation bug breaking cache&#10;&#10;CRITICAL BUG FIX: The caching implementation was fundamentally broken due to Spring AOP self-invocation issue.&#10;&#10;Problem:&#10;When a method calls another method within the same class (self-invocation),&#10;Spring's AOP proxy is bypassed, causing ALL annotations to be ignored:&#10;- @Cacheable (caching)&#10;- @Retry (retry logic)&#10;- @CircuitBreaker (circuit breaker)&#10;&#10;Affected Methods:&#10;- getTopAlbums() called getTopTracks() internally → NO CACHING&#10;- getTopGenres() called getTopArtists() internally → NO CACHING&#10;&#10;Impact:&#10;- /api/spotify/top/albums always hit Spotify API (no cache benefit)&#10;- /api/spotify/top/genres always hit Spotify API (no cache benefit)&#10;- /api/spotify/wrapped wasted 2 of 4 calls (albums/genres didn't use cache)&#10;- Caching was only working 50% of the time!&#10;&#10;Solution - AopContext.currentProxy() Pattern:&#10;The correct approach for Spring Boot 3.x (Spring 6) is to use AopContext.currentProxy()&#10;instead of self-injection, which causes circular dependency issues.&#10;&#10;Code Changes:&#10;1. SpotifyWrappedApplication.java:&#10;   - Added @EnableAspectJAutoProxy(exposeProxy = true)&#10;   - This exposes the AOP proxy so it can be accessed via AopContext&#10;&#10;2. SpotifyService.java:&#10;   - Added import: org.springframework.aop.framework.AopContext&#10;   - Updated getTopAlbums() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopTracks(maxSize);&#10;   - Updated getTopGenres() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopArtists(maxSize);&#10;&#10;3. SpotBugs exclusion:&#10;   - Added controller package exclusion for EI_EXPOSE_REP2&#10;   - False positive for Spring dependency injection pattern" />
    <option name="LAST_COMMIT_MESSAGE" value="fix: Fix critical Spring AOP self-invocation bug breaking cache&#10;&#10;CRITICAL BUG FIX: The caching implementation was fundamentally broken due to Spring AOP self-invocation issue.&#10;&#10;Problem:&#10;When a method calls another method within the same class (self-invocation),&#10;Spring's AOP proxy is bypassed, causing ALL annotations to be ignored:&#10;- @Cacheable (caching)&#10;- @Retry (retry logic)&#10;- @CircuitBreaker (circuit breaker)&#10;&#10;Affected Methods:&#10;- getTopAlbums() called getTopTracks() internally → NO CACHING&#10;- getTopGenres() called getTopArtists() internally → NO CACHING&#10;&#10;Impact:&#10;- /api/spotify/top/albums always hit Spotify API (no cache benefit)&#10;- /api/spotify/top/genres always hit Spotify API (no cache benefit)&#10;- /api/spotify/wrapped wasted 2 of 4 calls (albums/genres didn't use cache)&#10;- Caching was only working 50% of the time!&#10;&#10;Solution - AopContext.currentProxy() Pattern:&#10;The correct approach for Spring Boot 3.x (Spring 6) is to use AopContext.currentProxy()&#10;instead of self-injection, which causes circular dependency issues.&#10;&#10;Code Changes:&#10;1. SpotifyWrappedApplication.java:&#10;   - Added @EnableAspectJAutoProxy(exposeProxy = true)&#10;   - This exposes the AOP proxy so it can be accessed via AopContext&#10;&#10;2. SpotifyService.java:&#10;   - Added import: org.springframework.aop.framework.AopContext&#10;   - Updated getTopAlbums() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopTracks(maxSize);&#10;   - Updated getTopGenres() to use:&#10;     SpotifyService proxy = (SpotifyService) AopContext.currentProxy();&#10;     proxy.getTopArtists(maxSize);&#10;&#10;3. SpotBugs exclusion:&#10;   - Added controller package exclusion for EI_EXPOSE_REP2&#10;   - False positive for Spring dependency injection pattern" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>